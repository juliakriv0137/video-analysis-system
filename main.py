import sys
import json
import logging
from video_processor import VideoProcessor
from ai_analyzer import AIAnalyzer
import time
import os
import shutil
import zipfile
from datetime import datetime
from github_publisher import publish_to_github

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def create_results_archive(results, output_dir, video_metadata=None):
    """Create archive with analysis results"""
    try:
        # Create archive directory
        archive_dir = os.path.join(output_dir, 'analysis_results')
        os.makedirs(archive_dir, exist_ok=True)

        # Save analysis results as JSON
        results_file = os.path.join(archive_dir, 'analysis.json')
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)

        # Create README
        readme_content = f"""# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ
–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞—Ä—Ö–∏–≤–∞:
- all_frames/ - –≤—Å–µ –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ
- analysis.json - –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
- README.md - —ç—Ç–æ—Ç —Ñ–∞–π–ª

## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ:
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_metadata.get('duration', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')} —Å–µ–∫—É–Ω–¥
- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {video_metadata.get('resolution', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}
- –§–æ—Ä–º–∞—Ç: {video_metadata.get('format', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤: {len(results.get('all_frames_info', []))}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤: {len(results.get('frames', []))}
- –ù–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ: {"–î–∞" if results.get('audio_analysis') else "–ù–µ—Ç"}
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º—É–∑—ã–∫–∞: {"–î–∞" if results.get('audio_analysis', {}).get('music_detection', {}).get('has_music') else "–ù–µ—Ç"}

## –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
{results.get('summary', '–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è')}
"""

        readme_file = os.path.join(archive_dir, 'README.md')
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content)

        # Create ZIP archive
        zip_path = os.path.join(output_dir, 'video_analysis.zip')
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # Add frames directory
            frames_dir = os.path.join(output_dir, 'all_frames')
            for root, _, files in os.walk(frames_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    arc_path = os.path.join('all_frames', file)
                    zipf.write(file_path, arc_path)

            # Add analysis results and README
            zipf.write(results_file, 'analysis.json')
            zipf.write(readme_file, 'README.md')

        return zip_path

    except Exception as e:
        logger.error(f"Error creating archive: {str(e)}")
        raise

def analyze_video(url, publish=False):
    """Analyze video from URL and print results"""
    try:
        # Initialize processors
        video_processor = VideoProcessor(temp_dir='temp')
        ai_analyzer = AIAnalyzer()

        # Create output directory for frames
        output_dir = os.path.join('output', time.strftime('%Y%m%d_%H%M%S'))
        os.makedirs(output_dir, exist_ok=True)

        print("\n–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...")
        video_path = video_processor.download_video(url)
        print("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

        # Get video metadata
        video_metadata = video_processor.get_video_metadata(video_path)
        print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ:")
        print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video_metadata.get('duration', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')} —Å–µ–∫—É–Ω–¥")
        print(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {video_metadata.get('resolution', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}")
        print(f"–§–æ—Ä–º–∞—Ç: {video_metadata.get('format', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")

        # Extract all frames first
        print("\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–¥—Ä–æ–≤...")
        all_frames = video_processor.extract_all_frames(video_path, output_dir, fps=1)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(all_frames)} –∫–∞–¥—Ä–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {os.path.join(output_dir, 'all_frames')}")

        print("\n–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        frames = video_processor.extract_frames(video_path)
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(frames)} –∫–ª—é—á–µ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤")

        print("\n–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è...")
        results = {
            'frames': [],
            'audio_analysis': None,
            'all_frames_info': []  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∫–∞–¥—Ä–∞—Ö
        }

        # Process all frames
        print("\nüîÑ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏...")
        for frame_info in all_frames:
            frame_data = {
                'timestamp': frame_info['timestamp'],
                'filename': frame_info['filename'],
                'ocr_text': video_processor.perform_ocr(frame_info['path'])
            }
            results['all_frames_info'].append(frame_data)

        # Process key frames
        for i, frame in enumerate(frames, 1):
            print(f"\nüîÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤–æ–≥–æ –∫–∞–¥—Ä–∞ {i}/{len(frames)}...")
            frame_analysis = {
                'timestamp': frame['timestamp'],
                'ocr_text': video_processor.perform_ocr(frame['path']),
                'vision_analysis': ai_analyzer.analyze_image(frame['path'])
            }
            results['frames'].append(frame_analysis)
            print(f"‚úÖ –ö–∞–¥—Ä {i} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # Process audio
        print("\n–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ...")
        audio_path = video_processor.extract_audio(video_path)
        results['audio_analysis'] = {
            'transcription': ai_analyzer.transcribe_audio(audio_path),
            'music_detection': video_processor.detect_music(audio_path)
        }
        print("‚úÖ –ê—É–¥–∏–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        # Generate summary
        print("\n–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è...")
        results['summary'] = ai_analyzer.generate_summary(results)
        print("‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")

        # Print results in a readable format
        print("\n=== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–ò–î–ï–û ===\n")

        # Print summary if available
        try:
            summary = json.loads(results['summary'])
            if 'error' not in summary:
                print("üìù –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
                print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {summary.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {summary.get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                print(f"–¶–µ–ª—å –≤–∏–¥–µ–æ: {summary.get('purpose', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                print("\nüé• –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ê–°–ü–ï–ö–¢–´:")
                tech = summary.get('technical_aspects', {})
                print(f"–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {tech.get('video_quality', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"–û—Å–≤–µ—â–µ–Ω–∏–µ: {tech.get('lighting', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"–†–∞–±–æ—Ç–∞ –∫–∞–º–µ—Ä—ã: {tech.get('camera_work', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print("\nüë• –û–°–ù–û–í–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´:")
                main = summary.get('main_elements', {})
                print(f"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(main.get('characters', ['–ù–µ —É–∫–∞–∑–∞–Ω—ã']))}")
                print(f"–û–±—ä–µ–∫—Ç—ã: {', '.join(main.get('objects', ['–ù–µ —É–∫–∞–∑–∞–Ω—ã']))}")
                print(f"–õ–æ–∫–∞—Ü–∏–∏: {', '.join(main.get('locations', ['–ù–µ —É–∫–∞–∑–∞–Ω—ã']))}")
                print(f"–î–µ–π—Å—Ç–≤–∏—è: {', '.join(main.get('actions', ['–ù–µ —É–∫–∞–∑–∞–Ω—ã']))}")
                print("\n‚è±Ô∏è –•–†–û–ù–û–õ–û–ì–ò–Ø –°–û–ë–´–¢–ò–ô:")
                for event in summary.get('chronological_events', []):
                    print(f"{event['timestamp']}: {event['description']}")
                print("\nüîä –ê–£–î–ò–û –ê–ù–ê–õ–ò–ó:")
                audio = summary.get('audio_analysis', {})
                print(f"–†–µ—á—å: {audio.get('speech_content', '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞')}")
                print(f"–§–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏: {audio.get('background_sounds', '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã')}")
                print(f"–ú—É–∑—ã–∫–∞: {audio.get('music', '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞')}")
                print("\nüìã –î–ï–¢–ê–õ–¨–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï:")
                print(summary.get('detailed_summary', '–ù–µ —Å–æ–∑–¥–∞–Ω–æ'))
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:")
                print(json.dumps(summary, indent=2, ensure_ascii=False))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è")

        # Create archive with results
        print("\n–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞...")
        zip_path = create_results_archive(results, output_dir, video_metadata)
        print(f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_path}")

        # Cleanup
        video_processor.cleanup()
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∞—Ä—Ö–∏–≤–µ: {zip_path}")

        # Publish to GitHub if requested
        if publish:
            try:
                print("\n–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ GitHub...")
                repo_url = publish_to_github()
                print(f"‚úÖ –ö–æ–¥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ GitHub: {repo_url}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ GitHub: {str(e)}")
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ GitHub")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ: {str(e)}")
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python main.py <video_url> [--publish]")
        sys.exit(1)

    publish = "--publish" in sys.argv
    video_url = sys.argv[1]
    analyze_video(video_url, publish)